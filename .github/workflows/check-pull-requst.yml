name: Build

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - "**/*.rs"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "rust-toolchain.toml"
      - "rustfmt.toml"
      - ".github/workflows/*.yml"
  push:
    branches:
      - main
      - develop

# Ensures only one build is run per branch, unless pushing to develop
concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/develop' && github.run_number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_ARGS: ${{ github.ref == 'refs/heads/develop' && '--release' || '' }}
  CARGO_TERM_COLOR: always
  SKIP_WASM_BUILD: 1

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v3
      - run: cargo fmt --all -- --check

  lint:
    name: Clippy
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v3
      - run: ./.github/scripts/free_disk_space.sh
      - run: sudo apt-get install -y protobuf-compiler
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-lint-
      - run: cargo clippy --all-features --all-targets ${{ env.CARGO_ARGS }} -- -D warnings

  test:
    name: Test
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v3
      - run: ./.github/scripts/free_disk_space.sh
      - run: sudo apt-get install -y protobuf-compiler
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-full-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-test-full-
      - run: cargo test --workspace --all-features --all-targets ${{ env.CARGO_ARGS }}
